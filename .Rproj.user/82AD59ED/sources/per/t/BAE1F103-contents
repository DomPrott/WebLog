---
title: "Algo Trading with a Cointegrated Pairs Trading Strategy"
description: | 
  Cointegration is a valuable statistical tool in univariate pairs trading as it helps to identify the hedge ratio between two related assets and profit from their historical relationship. This approach can lead to a more balanced and risk-controlled portfolio, allowing traders to profit from market fluctuations.

author:
  - name: Dominic Prott
date: 2023-04-12
output:
  distill::distill_article:
    self_contained: false
categories:
    - Stocks
    - R
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(urca)
library(reshape2)
library(tidyverse)
library(gridExtra)
```

# Introduction

The Cointegrated Augmented Dickey-Fuller (CADF) approach is a popular trading strategy used in the domain of short-term mean-reversion models. The aim of CADF is to generate profits from the long-term relationship between stocks that are closely linked by buying and selling them based on extreme deviations from their historical relationship. CADF is a form of pairs trading, where two stocks are cointegrated and traded based on their price differences.

In this article, we will explore the basics of CADF and examine its practical application. We will begin by simulating stock prices to illustrate the concept of cointegration and demonstrate how it can be used to identify suitable pairs of stocks for pairs trading. Next, we will implement the pairs trading strategy using real stock pairs and assess its profitability through backtesting. This will involve testing the strategy on historical data to determine profit and loss, enabling us to make informed decisions about its suitability for investment goals.

# Cointegration Simulation
According to the random walk theory, stock prices can be modeled as random walks. Therefore, we start with simulating a simple random walk which then will act as the underlying stochastic trend for our stock pair: 

$$
\begin{split}
z_t =& \ z_{t-1} + e_t \\
=& \ z_{t-2} + e_{t-1} + e_t \\
=& \ ... \\
=& \ z_0 + \sum_{j=0}^{T-1} e_{t-j}
\end{split}
$$
where $e_t \sim WN(0, \sigma^2)$ is a Gaussian white noise error term and $t=1,2,..., T$. The intercept term will be set to 0, thus vanishing in the following. We subsequently use this series $z_t$ to create the cointegrated stock pair.

```{r rw, echo = T}
N <- 1000

set.seed(123)
z <- cumsum(rnorm(N, mean = 0, sd = 4))

sigma_x <- 1.5
sigma_y <- 1.8

y0 <- 60
x0 <- 50

a <- 0.4
b <- 0.6

y <- y0 + a*z + rnorm(N, mean = 0, sd = sigma_y)
x <- x0 + b*z + rnorm(N, mean = 0, sd = sigma_x)

library(ggplot2)
library(gridExtra)

grid.arrange(
ggplot() +
  geom_line(aes(x = 1:N, y = z), col = "blue") +
  theme_minimal() +
  labs(x = NULL, y = NULL),
ggplot() + 
  geom_line(aes(x = 1:N, y = y, col = "y")) +
  geom_line(aes(x = 1:N, y = x, col = "x")) +
  theme_minimal() +
  labs(color = "Series", x = NULL, y = NULL),
nrow = 2)
  
```

The two "stock prices" below are descendants of the random walk at the top, only deviating in their intercept terms $y_0$ and $x_0$, the coefficients $a$ and $b$ and their respective variances $\sigma_y^2$ and $\sigma_x^2$. 

The processes are said to be cointegrated when there exists a linear combination of them that is stationary over time. Such a linear combination might be the spread between two stock prices as in this case. When the statistical properties of the spread - their mean and variance - remain constant over time, it is said to be stationary or mean-reverting making it forecastable.

$$
\begin{split}
spread_t &= y_t - \gamma x_t \\
&= (y_0- \gamma x_0) + (az_t - \gamma bz_{t}) + (e_{yt}- \gamma e_{xt})
\end{split}
$$
The series are cointegrated and $spread_t$ is stationary for $(az_t - \gamma bz_{t}) = 0$ which implies $(a - \gamma b)=0$. Since $a=0.4$ and $b=0.6$, this is the case for when the hedge ratio $\gamma = 2/3$. It can also be written as: 

$$
\begin{split}
spread_t &= y_t - \gamma x_t \\
&= \mu + e_t
\end{split}
$$

The spread is constructed to be stationary, because by subtracting one stock price from the other, their common trends are removed. This leaves behind only the white noise error term, denoted by $e_t$, which has a mean of 0 and a variance of $\sigma^2$. It is stationary, allowing for statistical analysis and modeling of the relationship between the two stocks which can furthermore be expressed in terms of a linear regression model of the form:

$$
y_t = \mu + \gamma x_t + e_t 
$$

Since we do not know about cointegration in real world examples, we make use of the [Two-Step-Engle-Granger-Procedure](https://www.jstor.org/stable/1913236). This involves modelling the relationship in the form of a linear regression model, estimating it and then testing for the stationarity property of its residuals using unit root tests like the [Augmented Dickey-Fuller](https://www.jstor.org/stable/1912517) (adf-test). This adf-test is applied next on $e_t$:

```{r simmodel, echo = T}
model1 <- lm(y~x)
model2 <- lm(x~y)

model1
model2

library(urca)
summary(ur.df(model1$residuals, selectlags = "BIC"))

grid.arrange(
    ggplot() + 
      geom_line(aes(x = 1:N, y = model1$residuals)) +
      theme_minimal() +
      labs(color = "Series", x = NULL, y = NULL),
    ggplot() + 
      geom_line(aes(x = 1:N, y = model2$residuals)) +
      theme_minimal() +
      labs(color = "Series", x = NULL, y = NULL), 
  nrow = 2)
```

As we can see from the estimation, the hedge ratio $\gamma = 0.67$ is close enough to conclude on $(a-\gamma b) = 0$ such that there are only the stationary residuals left. In the subsequent adf-test the null hypothesis of non-stationarity is rejected at 1% significance level which is not surprising as the simulated processes were created in such a way in the first place. Moreover, the graphical representation of the two residual series shows mean reversion for both around 0 and similar amplitudes.

Therefore, we can conclude that the two simulated series are cointegrated and that their spread reverts back to its mean with a constant variance making it possible to forecast it. We should be able to make profits from this by buying and selling the two stock prices based on their spread and converging behavior. 

# Find Pairs
To implement CADF, the initial challenge is to identify stocks with a long-term bidirectional relationship. This can be achieved by looking for same industry/sector stocks with similar market capitalization or pairing ETFs of related products. Alternatively, A and B share stocks like Berkshire Hathaway can be considered. Next, we estimate the spread using static OLS. In the future, means of rolling estimation like Kalman filtering can be applied to achieve more accurate results.

# Cointegration Test

Like in [Ernest Chan, 2013](https://www.wiley.com/en-gb/Algorithmic+Trading%3A+Winning+Strategies+and+Their+Rationale-p-9781118460146), the pair to be examined are ETF's which reflect the commodity-based economies of Australia and Canada (EWA and EWC respectively). At first, we logarithmize the stock prices to help normalize the data, then chart their series and visually inspect their relationship.

```{r stocks, echo = T}
library(tidyquant)

EWA <- tq_get("EWA", get = "stock.prices", from = "2000-01-01", to = today()) %>% 
            select(date, adjusted)
  
EWC <- tq_get("EWC", get = "stock.prices", from = "2000-01-01", to = today()) %>% 
            select(date, adjusted)
  
series <- merge(EWA, EWC, by = "date")
names(series) <- c("date", "EWA", "EWC")
series$EWA <- log(series$EWA)
series$EWC <- log(series$EWC)

grid.arrange(
series %>% 
  ggplot() +
    geom_line(aes(x = date, y = EWA, col = "EWA")) +
    geom_line(aes(x = date, y = EWC, col = "EWC")) +
    theme_minimal() +
    labs(color = "Series", x = NULL, y = NULL),
series %>% 
  ggplot() +
  geom_point(aes(x = EWA, y = EWC)) + 
  theme_minimal() +
  labs(x = paste(colnames(series)[2], "Adjusted Price in USD"), y = paste(colnames(series)[3], "Adjusted Price in USD")),
nrow = 2)
```
From the look of it, it seems they follow similar patterns. With the exception of the cluster near the origin, the scatter plot is relatively diagonal which is also indicative for common price movements. Similar to the simulation, we apply OLS to a linear regression model, next. However, we first split the data into training and test periods to compare the results and the model's accuracy later on.

```{r lm, echo = T}
train <- round(0.7*nrow(series)) #split according to 70:30 rule
test <- nrow(series) - train

model1 <- lm(EWA~EWC, data = series[1:train,])
model2 <- lm(EWC~EWA, data = series[1:train,])

coef(model1)
coef(model2)
```

According to the Engle-Granger_Procedure we test the residuals of the models for stationarity using the adf-unit-root-test:

```{r resids, echo = T}

residuals_df <- data.frame(date = series$date,
                           residuals1 = series$EWA - (coef(model1)[1] + coef(model1)[2]*series$EWC),
                           residuals2 = series$EWC - (coef(model2)[1] + coef(model2)[2]*series$EWA))

residuals_df %>% 
  ggplot() + 
    geom_line(aes(x = date, y = residuals1)) +
    theme_minimal() +
    labs(x = NULL, y = NULL) +
    geom_hline(yintercept = mean(residuals_df$residuals1), col = "blue")

ur.df(residuals_df$residuals1, selectlags = "BIC")
ur.df(residuals_df$residuals2, selectlags = "BIC")

```
Both models reject the null hypothesis of non-stationarity at conventional significance levels. The critical values are the same as in the simulated case above. 

To determine which series to select as dependent and independent variable, we will rely on the value of the adf test statistic. The more negative the result, the less uncertainty about the stationarity of the residuals. In this case, model 2 reveals to be a slightly better fit. Thus, EWC as the dependent variable is treated as the primary symbol. 

# Trade Signals
Since we can now be arbitrarily sure that the series are cointegrated, we continue with creating trade signals according to our long-short-strategy. For that, we standardize the spread treating it as a Z-Score which is defined as:

```{r model, echo = T}
residuals <- residuals_df$residuals2
residuals_df$z_score <- (residuals-mean(residuals))/sd(residuals) 

residuals_df %>% 
  ggplot() + 
    geom_line(aes(x = date, y = z_score)) +
    theme_minimal() +
    labs(x = NULL, y = NULL) +
    geom_hline(yintercept = -1.6, linetype = "dashed", col = "green") + 
    geom_hline(yintercept = 1.6, linetype = "dashed", col = "green") +
    geom_hline(yintercept = -2.4, linetype = "dashed", col = "red") + 
    geom_hline(yintercept = 2.4, linetype = "dashed", col = "red") +
    geom_vline(xintercept = series$date[train], col = "blue") +
    geom_hline(yintercept = mean(residuals), col = "blue")
```
The vertical blue line represents the end of the training period, here and the horizontal one the mean for better visual orientation. The dashed green line represents trading signals. The trading strategy could moreover include a stop-loss which is displayed by the dashed red line.

*Warning*: With standardization we made the assumption that the residual series now is standard normal distributed. The following code examines whether this assumption is to hold. 

```{r Z-Score normal, echo = T}
hist(residuals_df$z_score)

library(qqplotr) #add for confidence interval
ggplot(residuals_df, aes(sample = z_score)) +
  stat_qq() +
  stat_qq_line() +
  stat_qq_band()

#Shapiro test for normality limited to 5000 obs
set.seed(123)
sample_z <- sample(residuals_df$z_score, size = 500)
shapiro.test(sample_z)
```

For the sake of the argument, we assume the residuals to be normally distributed in the following, even though they appear not to be in all three checks. When applying the CADF pairs trading strategy, make sure your assumptions are met beforehand for optimal results.

The trade signals are the values 1 for long-position, -1 for short-position and 0 for no position. They are generated using a function which assigns the values based on the movements of the Z-Score in relation to predetermined long and short thresholds. The long-threshold is selected to be -1.6 and the short threshold as equal to 1.6. 

```{r trade signals, echo = T}
z_score <- residuals_df$z_score

long_signal = rep(-1.6, length(z_score)) #equal to yintercept in previous graph
short_signal = rep(1.6, length(z_score))

generate_signal <- function(z_score, long_signal, short_signal) {
  signal <- rep(0,length(z_score))
  
  #initialize
  signal[1] <- 0
  if (z_score[1] <= long_signal[1]) {
    signal[1] <- 1
  } else if (z_score[1] >= short_signal[1])
    signal[1] <- -1
  
  for (t in 2:length(z_score)) {
    if (signal[t-1] == 0) {  
      if (z_score[t] <= long_signal[t]) {
        signal[t] <- 1
      } else if(z_score[t] >= short_signal[t]) {
        signal[t] <- -1
      } else signal[t] <- 0
    } else if (signal[t-1] == 1) { 
      if (z_score[t] >= 0) signal[t] <- 0
      else signal[t] <- signal[t-1]
    } else { 
      if (z_score[t] <= 0) signal[t] <- 0
      else signal[t] <- signal[t-1]
    }
  }
  return(signal)
}

```

The returned vector $signal$ now only consists of [-1,0,1]. In the following, it is plotted alongside the Z-Score and the dashed long and short thresholds:

```{r plot trade signals, echo = T}
residuals_df$signal <- generate_signal(z_score, long_signal, short_signal)

residuals_df %>% 
  ggplot() + 
    geom_line(aes(x = date, y = signal, col = "Signal")) +
    geom_line(aes(x = date, y = z_score, col = "Z-Score")) +
    geom_hline(yintercept = -1.6, linetype = "dashed", col = "green") + 
    geom_hline(yintercept = 1.6, linetype = "dashed", col = "green") +
    geom_vline(xintercept = series$date[train], col = "blue") +
    theme_minimal() +
    labs(color = NULL, x = NULL, y = NULL) 
```

# Profit and Loss
The investment goal is to maximize profit from our pairs trading strategy, so at last we will examine the daily profit and loss (P&L) as a backtest for on this long-short portfolio. A simple way of doing this is taking the Z-Score of the historic price data of our two series as well as the trading signal and then calculating cumulative daily returns. As a quick recap, the calculation implicitly present throughout the code up to this point and next is then in summary:

1. Construct portfolio as residuals of a linear regression with $\gamma$ as hedge ratio: $e_t = y_t - \gamma x_t$
2. Get the trade signals and the resulting position $P_t$ from our strategy
3. Get daily returns: $R_t = e_t - e_{t-1}$ 
4. Compute daily returns $R_t^s$ from our strategy with respect to the positions: $R_t^s = R_tP_{t-1}$
5. Compute cumulative daily P&L from equity curve: $\epsilon_t = \sum_0^T R_t^s$


```{r pnl, echo = T}
spread_return <- diff(residuals) #daily returns
residuals_df$traded_return <- spread_return * lag(residuals_df$signal)

residuals_df <- residuals_df %>%  
                mutate(traded_return = ifelse(is.na(traded_return), 0, traded_return))
```

The daily returns from our trades look like this:

```{r plot return, echo = T}
residuals_df %>% 
  ggplot() +
    geom_line(aes(x = date, y = traded_return)) +
    geom_vline(xintercept = series$date[train], col = "blue") +
    theme_minimal() +
    labs(color = NULL, x = NULL, y = NULL) 

```

And the P&L equity curve with percentage returns on the y-axis due to logarithmizing looks like this:

```{r plot pnl, echo = T}
residuals_df$no_reinvest <- 1 + cumsum(residuals_df$traded_return)
residuals_df$with_reinvest <- cumprod(1 + residuals_df$traded_return)

grid.arrange(
  residuals_df %>% 
    ggplot() +
      geom_line(aes(x = date, y = no_reinvest)) +
      geom_vline(xintercept = series$date[train], col = "blue") +
      theme_minimal() +
      labs(color = NULL, x = NULL, y = NULL),
  residuals_df %>% 
    ggplot() +
      geom_line(aes(x = date, y = with_reinvest)) +
      geom_vline(xintercept = series$date[train], col = "blue") +
      theme_minimal() +
      labs(color = NULL, x = NULL, y = NULL),
  nrow = 2)

```
# Conclusion
When concluding, we must observe that this strategy does indeed not yield relevant returns over a more than 20 years period. There are however some clues on why that is. Firstly, there could be found more profitable cointegrated series. Secondly, the long-short strategy with daily trade closings is not suitable. Thirdly and most obviously, the static OLS linear model is not a good fit to ever changing values of non-stationary stock prices. Means of rolling cointegration and rolling least squares or Kalman filtering could improve the strategy drastically. 

# References

Pei, Hansen, *The Correct Vectorized Backtest Methodology for Pairs Trading*, in: https://hudsonthames.org/correct-backtest-methodology-pairs-trading/ (last visited: 12.04.23)

Quantstart, *Cointegrated Augmented Dickey Fuller Test for Pairs Trading Evaluation in R*, in: https://www.quantstart.com/articles/Cointegrated-Augmented-Dickey-Fuller-Test-for-Pairs-Trading-Evaluation-in-R/ (last visited 12.04.23)

Palomar, Daniel P., *Pairs Trading with R*, in: https://palomar.home.ece.ust.hk/MAFS5310_lectures/Rsession_pairs_trading_with_R.html#Trading_the_spread (last visited 12.04.23)

Alexandre Rubesam, *Pairs Trading: Replicating Gatev, Goetzmann and Rouwenhorst (2006)*, in: https://rpubs.com/arubesam/ReplicatingGGR (last visited 12.04.23)





